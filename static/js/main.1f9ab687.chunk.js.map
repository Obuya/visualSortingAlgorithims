{"version":3,"sources":["sortingAlgo/sortingAlgorithms.js","index.js","sortingAlgo/bubbleSort.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","TIME","Page","props","newArray","setState","genArray","console","log","state","swapped","temp","doBubbleSort","getBubbleSortAnimations","this","arrayBars","document","getElementsByClassName","barTwoIdx","barOneIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","offsetHeight","height","color","newHeight","getElementById","onclick","bubbleSort","quickSort","mergeSort","className","map","value","idx","bottom","React","Component","min","max","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.1f9ab687.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.min.css';\r\nimport './index.css';\r\nimport {\r\n  getBubbleSortAnimations\r\n} from \"./sortingAlgo/bubbleSort\";\r\nimport { getMergeSortAnimations } from './sortingAlgo/sortingAlgorithms.js';\r\n\r\nconst TIME = 0.5;\r\nconst BARS = 500;\r\n\r\nclass Page extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: genArray()\r\n    };\r\n  }\r\n\r\n  newArray = () => {\r\n    this.setState({ array: genArray() });\r\n    console.log(this.state.array);\r\n  }\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('rec');\r\n\r\n      const [barTwoIdx, barOneIdx] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      const barTwoStyle = arrayBars[barTwoIdx].style;\r\n      //const color = i % 3 === 0 ? '#6547c9' : 'red';\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = '#6547c9';\r\n        barTwoStyle.backgroundColor ='#6547c9';\r\n        setTimeout(() => {\r\n          //console.log(arrayBars[newHeight]);\r\n          // console.log( \"old height: \"+ arrayBars[barOneIdx].offsetHeight + \" new height:\"+ arrayBars[barTwoIdx].offsetHeight);\r\n          var temp = arrayBars[barOneIdx].offsetHeight;\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${arrayBars[barTwoIdx].offsetHeight}px`;\r\n          barTwoStyle.height = `${temp}px`;\r\n        }, (i + 1) * TIME)\r\n      }\r\n\r\n        , i * TIME);\r\n    }\r\n    //  const [comparison,swap] = animations[0];\r\n    // // console.log(animations[1]);\r\n    // console.log(comparison);\r\n    // // console.log(swap);\r\n    // const arrayBars = document.getElementsByClassName('rec');\r\n    // arrayBars[comparison].style.backgroundColor = 'red';\r\n    // console.log(arrayBars[comparison]);\r\n    // console.log(arrayBars);\r\n    console.log('bubbleSort');\r\n    console.log(this.state.array);\r\n  }\r\n  quickSort() {\r\n    console.log('quickSort');\r\n  }\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('rec');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? 'red' : '#6547c9';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * TIME);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * TIME);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    document.getElementById('genArray').onclick = () => this.newArray();\r\n    document.getElementById('bubbleSort').onclick = () => this.bubbleSort();\r\n    document.getElementById('quickSort').onclick = () => this.quickSort();\r\n    document.getElementById('mergeSort').onclick = () => this.mergeSort();\r\n    return (\r\n      <div className=\"game\">\r\n        {this.state.array.map((value, idx) => (\r\n          <div\r\n            className=\"rec\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: '#6547c9',\r\n              height: `${value}px`,\r\n              bottom: '10px',\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction genArray() {\r\n  const array = [];\r\n  for (let i = 0; i < BARS; i++) {\r\n    array.push(randomIntFromInterval(5, 750));\r\n  }\r\n  return array;\r\n}\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\n\r\n// ========================================\r\n// let pg = new Page();\r\n\r\n// ReactDOM.render(\r\n//   pg.render(),\r\n//   document.getElementById('root')\r\n// );\r\n// ReactDOM.render(\r\n//   pg.getBtn(),\r\n//   document.getElementById('dropdown')\r\n// );\r\nReactDOM.render(\r\n  <Page />,\r\n  document.getElementById('root')\r\n);","\r\nexport function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    doBubbleSort(animations, auxiliaryArray);\r\n    return animations;\r\n}\r\n\r\nexport function doBubbleSort(animations, auxiliaryArray) {\r\n    var swapped;\r\n    do {\r\n        swapped = false;\r\n        for (var i = 0; i < auxiliaryArray.length - 1; i++) {\r\n            if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n                var temp = auxiliaryArray[i];\r\n                auxiliaryArray[i] = auxiliaryArray[i + 1];\r\n                auxiliaryArray[i + 1] = temp;\r\n                animations.push([i, i + 1]);\r\n                swapped = true;\r\n            }\r\n        }\r\n    } while (swapped);\r\n    return auxiliaryArray;\r\n}"],"sourceRoot":""}